datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  userId    String    @unique
  username  String
  email     String    @unique
  Vehicles  Vehicle[]
  Customers  Customer[]
  Contracts  Contract[]
  Maintenances         Maintenance[] 
  Transactions         Transaction[] 

}

model Vehicle {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  user                User?   @relation(fields: [userId], references: [userId])
  userId              String?
  plateNumber         String  @unique
  brand               String
  meter               Float
  status              String @default("Available")
  rentalCount         Int?    
  transmission        String @default("Automatic")
  manufactureYear     Float?
  color               String?
  extraHourPrice      Float
  dailyRent           Float
  weeklyRent          Float
  monthlyRent         Float
  insuranceCompany    String?
  registrationType    String?
  fuelType            String
  extraKilometerPrice Float
  vehicleType         String?
  dailyKilometerLimit Float
  Contracts           Contract[]
  Transactions         Transaction[] 
  Maintenances         Maintenance[] 

}
model Customer {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  user                User     @relation(fields: [userId], references: [userId])
  userId              String
  customerName        String       
  category            String
  nationality         String
  idNumber            String
  idExpirationDate    String?
  mobile              String?
  debt                Float? @default(0)
  Contracts           Contract[]
  Transactions         Transaction[] 

}
model Contract {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  user                User        @relation(fields: [userId], references: [userId])
  userId              String
  plateNumber         String      @unique
  total               Float
  paid                Float
  remainingDues       Float
  meterReadingOut     Float
  meterReadingIn      Float?
  timeOut             String
  dailyRent           Float
  days                Float
  timeIn              String
  dateOut             String
  returnedDate        String
  returnStatus        String?
  earlyReturnFee      String?
  lateReturnFee       String?
  invoiceDetails      String?
  customerId          String        @db.ObjectId
  transacionId        String?        @db.ObjectId
  customer            Customer     @relation(fields: [customerId], references: [id])
  vehicle             Vehicle      @relation(fields: [plateNumber], references: [plateNumber])
  Transactions         Transaction[] 
}
model Transaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User      @relation(fields: [userId], references: [userId])
  userId         String
  amount     Float
  type       String
  plateNumber    String
  createdAt  DateTime @default(now())
  
  contract   Contract? @relation(fields: [contractId], references: [id])
  contractId String?   @db.ObjectId
  
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?  @db.ObjectId
  
  Maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id])
  maintenanceId String?  @db.ObjectId @unique

  vehicle    Vehicle   @relation(fields: [plateNumber], references: [plateNumber])
}
model Maintenance {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  user           User      @relation(fields: [userId], references: [userId])
  userId         String
  plateNumber    String
  maintenanceType String
  client         String?
  date           String
  cost           Float
  description    String?
  vehicle        Vehicle   @relation(fields: [plateNumber], references: [plateNumber])
  transaction    Transaction?
}

// model Invoice {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   user                User?        @relation(fields: [userId], references: [id])
//   userId              String?
//   customerId          String    
//   customer            Customer     @relation(fields: [customerId], references: [id])
//   date                String
//   price               Float
//   debt                Float
//   paid                Float
//   total               Float
//   amount              Float
//   description         String
//   addTax              Boolean
//   contract            Contract?    @relation(fields: [contractId], references: [id])
//   contractId          String?
// }

